/*
Deployment script for DataImporterServiceDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "DataImporterServiceDB"
:setvar DefaultFilePrefix "DataImporterServiceDB"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating Table [dbo].[Company]...';


GO
CREATE TABLE [dbo].[Company] (
    [Company_ID]   INT           NOT NULL,
    [Company_Name] VARCHAR (MAX) NOT NULL,
    PRIMARY KEY CLUSTERED ([Company_ID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Feed]...';


GO
CREATE TABLE [dbo].[Feed] (
    [Feed_ID]   INT           NOT NULL,
    [Feed_Name] VARCHAR (MAX) NOT NULL,
    PRIMARY KEY CLUSTERED ([Feed_ID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Product]...';


GO
CREATE TABLE [dbo].[Product] (
    [Product_UniqueID]    INT           NOT NULL,
    [Product_Name]        VARCHAR (MAX) NOT NULL,
    [Product_Brand]       VARCHAR (MAX) NOT NULL,
    [Product_Description] VARCHAR (MAX) NOT NULL,
    [Company_ID]          INT           NOT NULL,
    [Feed_ID]             INT           NOT NULL,
    PRIMARY KEY CLUSTERED ([Company_ID] ASC, [Feed_ID] ASC, [Product_UniqueID] ASC)
);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Product]...';


GO
ALTER TABLE [dbo].[Product] WITH NOCHECK
    ADD FOREIGN KEY ([Company_ID]) REFERENCES [dbo].[Company] ([Company_ID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Product]...';


GO
ALTER TABLE [dbo].[Product] WITH NOCHECK
    ADD FOREIGN KEY ([Feed_ID]) REFERENCES [dbo].[Feed] ([Feed_ID]);


GO
PRINT N'Creating Procedure [dbo].[AddCompanys]...';


GO
CREATE PROCEDURE [dbo].[AddCompanys]
(
	@Company_ID INT,
	@Company_Name VARCHAR (MAX)
)
as
INSERT INTO [Company] (Company_ID,Company_Name) values (@Company_ID, @Company_Name)
GO
PRINT N'Creating Procedure [dbo].[AddFeeds]...';


GO
CREATE PROCEDURE [dbo].[AddFeeds]
(
	@Feed_ID VARCHAR (MAX),
	@Feed_Name VARCHAR (MAX)
)
as
INSERT INTO [Feed] (Feed_ID,Feed_Name) values (@Feed_ID, @Feed_Name)
GO
PRINT N'Creating Procedure [dbo].[AddProducts]...';


GO
CREATE PROCEDURE [dbo].[AddProducts]
(
	@Product_UniqueID INT,
	@Product_Name VARCHAR (MAX),
	@Product_Brand VARCHAR (MAX),
	@Product_Description VARCHAR (MAX),
	@Company_ID INT,
	@Feed_ID INT
)
as
INSERT INTO [Product] (Product_UniqueID, Product_Name, Product_Brand, Product_Description, Company_ID, Feed_ID) 

		values (@Product_UniqueID, @Product_Name,@Product_Brand,@Product_Description,@Company_ID,@Feed_ID)
GO
PRINT N'Creating Procedure [dbo].[ClearProducts]...';


GO
CREATE PROCEDURE [dbo].[ClearProducts]

AS

DELETE FROM Product

RETURN 0
GO
PRINT N'Creating Procedure [dbo].[GetCompanys]...';


GO
CREATE PROCEDURE [dbo].[GetCompanys]
AS
BEGIN
	SELECT * FROM Company
return
END
GO
PRINT N'Creating Procedure [dbo].[GetFeeds]...';


GO
CREATE PROCEDURE [dbo].[GetFeeds]
AS
BEGIN
	SELECT * FROM Feed
return
END
GO
PRINT N'Creating Procedure [dbo].[GetProducts]...';


GO
CREATE PROCEDURE [dbo].[GetProducts]
AS
BEGIN
	SELECT * FROM Product
return
END
GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'dbo.Product'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: ' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.';


GO
